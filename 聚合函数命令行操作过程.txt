>>>def showsql():
...     from django.db import connection
...     print(connection.queries[-1]['sql'])
...     
>>>from django.db.models import Max
>>>from stu.models import *
>>>Student.objects.aggregate(Max('score'))
{'score__max': 99}
>>>showsql()
SELECT MAX("stu_student"."score") AS "score__max" FROM "stu_student"
>>>Student.objects.aggregate(m=Max('score'))
{'m': 99}
>>>showsql()
SELECT MAX("stu_student"."score") AS "m" FROM "stu_student"
>>>from django.db.models import *
>>>Student.objects.aggregate(Min('score'))
{'score__min': 66}
>>>showsql()
SELECT MIN("stu_student"."score") AS "score__min" FROM "stu_student"
>>>Student.objects.aggregate(Count('score'))
{'score__count': 4}
>>>Student.objects.aggregate(Count('*'))
Traceback (most recent call last):
  File "D:\workspace\Pycharm\CustomManagerAndAdvancedQueryAndTransactionManagement\venv\lib\site-packages\django\db\models\query.py", line 374, in aggregate
    arg.default_alias
  File "D:\workspace\Pycharm\CustomManagerAndAdvancedQueryAndTransactionManagement\venv\lib\site-packages\django\db\models\aggregates.py", line 65, in default_alias
    raise TypeError("Complex expressions require an alias")
TypeError: Complex expressions require an alias
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "D:\workspace\Pycharm\CustomManagerAndAdvancedQueryAndTransactionManagement\venv\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\workspace\Pycharm\CustomManagerAndAdvancedQueryAndTransactionManagement\venv\lib\site-packages\django\db\models\query.py", line 376, in aggregate
    raise TypeError("Complex aggregates require an alias")
TypeError: Complex aggregates require an alias
>>>Student.objects.aggregate(c=Count('*'))
{'c': 4}
>>>showsql()
SELECT COUNT(*) AS "c" FROM "stu_student"
>>>Student.objects.aggregate(Sum('score'))
{'score__sum': 330}
>>>showsql()
SELECT SUM("stu_student"."score") AS "score__sum" FROM "stu_student"
>>>Student.objects.aggregate(Avg('score'))
{'score__avg': 82.5}
>>>showsql()
SELECT AVG("stu_student"."score") AS "score__avg" FROM "stu_student"